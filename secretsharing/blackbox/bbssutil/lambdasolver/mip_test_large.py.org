
from __future__ import print_function
from ortools.linear_solver import pywraplp

import numpy as np 

'''
def create_data_model():
  """Stores the data for the problem."""
  data = {}
  data['constraint_coeffs'] = [
      [5, 7, 9, 2, 1],
      [18, 4, -9, 10, 12],
      [4, 7, 3, 8, 5],
      [5, 13, 16, 3, -7],
  ]
  data['bounds'] = [250, 285, 211, 315]
  data['obj_coeffs'] = [7, 8, 2, 9, 6]
  data['num_vars'] = 5
  data['num_constraints'] = 4
  return data
'''


def create_data_model2():
    data = {}
    M_filename = "m27.txt" 
    M = np.loadtxt(M_filename, dtype=int)
    
    mt = np.transpose(M)
    num_constrs, num_var = mt.shape
    e  = np.zeros((num_constrs,), dtype=int)
    e[0] = 1
    
    data['constraint_coeffs'] = mt 

    data['bounds'] = e
    

    coeffs = [1]*len(mt[0])

    data['obj_coeffs']      = coeffs 
    data['num_vars']        = len(mt[0])
    data['num_constraints'] = num_constrs
    return data 



def main():
    data = create_data_model2()
    # Create the mip solver with the CBC backend.
    solver = pywraplp.Solver('simple_mip_program', pywraplp.Solver.CBC_MIXED_INTEGER_PROGRAMMING)
    infinity = solver.infinity()
    x = {}
    for j in range(data['num_vars']):
       x[j] = solver.IntVar(-1, 1, 'x[%i]' % j)
    print('Number of variables =', solver.NumVariables())


    '''

  for i in range(data['num_constraints']):
    constraint = solver.RowConstraint(0, data['bounds'][i], '')
    for j in range(data['num_vars']):
      constraint.SetCoefficient(x[j], data['constraint_coeffs'][i][j])
  print('Number of constraints =', solver.NumConstraints())
  '''
  # In Python, you can also set the constraints as follows.
    for i in range(data['num_constraints']):
        constraint_expr = [data['constraint_coeffs'][i][j] * x[j] for j in range(data['num_vars'])]
        solver.Add(sum(constraint_expr) == data['bounds'][i])

    objective = solver.Objective()
    for j in range(data['num_vars']):
        objective.SetCoefficient(x[j], data['obj_coeffs'][j])
    #objective.SetMaximization()
    objective.SetMinimization()
    # In Python, you can also set the objective as follows.
    # obj_expr = [data['obj_coeffs'][j] * x[j] for j in range(data['num_vars'])]
    # solver.Maximize(solver.Sum(obj_expr))

    status = solver.Solve()

    if status == pywraplp.Solver.OPTIMAL:
        print('Objective value =', solver.Objective().Value())
        for j in range(data['num_vars']):
            print(x[j].name(), ' = ', x[j].solution_value())
        print()
        print('Problem solved in %f milliseconds' % solver.wall_time())
        print('Problem solved in %d iterations' % solver.iterations())
        print('Problem solved in %d branch-and-bound nodes' % solver.nodes())
    else:
        print('The problem does not have an optimal solution.')


if __name__ == '__main__':
    main()

