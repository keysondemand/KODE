

import sys , json, re , time, csv   
import os, threading, socket, ast
import numpy as np 


from OpenSSL                    import SSL, crypto
from sys                        import argv 
from time                       import sleep
from operator                   import add

from charm.core.engine.util     import *
from charm.core.math.integer    import *

sys.path += ['./','../','../../']

#KODE related configs and utils 
from conf.connectionconfig                      import *
from conf.groupparam                            import *
from util.connectionutils                       import *
from util.transactionbroadcast                  import *
from util.nizk                                  import *
from secretsharing.blackbox.bbssutil.rhocommit  import *

#from dprf              import partial_eval

debug = 0

MALICIOUS = 0
AWS = 0

BASE_PORT = 6566
if AWS:
    MY_IP = ((requests.get('http://checkip.amazonaws.com')).text).strip()
else:
    MY_IP = "127.0.0.1"

broadcast_counter = 0

peers = {}
connections = {}

my_rcvd_shares               = {}
my_rcvd_shares_dash          = {}
my_rcvd_shares_strings       = {}
my_rcvd_shares_dash_strings  = {}

peer_share_commits           = {}
peer_dlog_commits            = {}

generated_shares             = {}

complaints                   = {}
records                      = {}
nizks                        = {}


#TODO: Change these to sets 
accused_nodes                = []

nodes_verification_failed    = []
QualifiedSet                 = []
DisqualifiedSet              = []

tx_count = 0
epoch    = 0

#N_M_map          = json.load(open("../../secretsharing/blackbox/tmp/N_M_map.txt"))    
node_share_index = json.load(open("../../secretsharing/blackbox/tmp/node_share_index.txt"))    

#complaint_count = {}

def DPRINT ( *args , **kwargs ) :
    if debug:
        print ( *args , **kwargs )

def deserializeElements(objects):
    object_byte_strings = re.findall(r"'(.*?)'", objects , re.DOTALL)
    object_strings  = [ str.encode(a) for a in object_byte_strings]
    elements = [group.deserialize(a) for a in object_strings]
    return elements


def verifyConnection(conn, cert, errnum, depth, ok):
    return ok

def initSSLContext():
    ctx = SSL.Context(SSL.SSLv23_METHOD)
    ctx.set_options(SSL.OP_NO_SSLv2)
    ctx.set_options(SSL.OP_NO_SSLv3)
    ctx.set_verify(
            SSL.VERIFY_PEER, verifyConnection
    ) # Demand a Certificate
    ctx.use_privatekey_file(CLIENT_PVT_KEY_FILE)
    ctx.use_certificate_file(CLIENT_CERT_FILE)
    ctx.load_verify_locations(CA_FILE)
    return ctx 


def serverSock(MY_IP, MY_PORT):
    #ctx = initSSLContext()
    #s  = SSL.Connection( ctx , socket.socket ( socket.AF_INET , socket.SOCK_STREAM ))
    s  = socket.socket ( socket.AF_INET , socket.SOCK_STREAM )
    s.bind ( ( '', MY_PORT ) )
    s.listen ( N_NODES)
    for peer in range ( N_NODES-1 ) : 
        try:
            peer_con , peer_addr = s.accept ( ) 
            data_received = recv_data ( peer_con)    #TODO: change this from int to data directly 
            data_received = json.loads(data_received)
            pid = data_received["my_id"]
            print( "Received Hello packet from the node " , pid , " at " , str ( peer_addr ) ) 
            peers[ pid ] = peer_con 
            #TODO: add acknowledgement? 

            peer_con.sendall(b"ACK")


        except Exception as e: print(e)
    
def sendId2peers(nid ):
    print("my id is:", nid)
    #ctx = initSSLContext ( )

    for node_index in range ( N_NODES) :
        go_ahead = 0
        if AWS and (MY_IP != NODE_IP[node_index]) :
            go_ahead = 1
        if not AWS and (node_index != nid):
            go_ahead = 1
        DPRINT("Attempting to send Hello to Node", node_index)
        if go_ahead :
            try:
                connection_retries = 50
                while connection_retries > 0:
                    s = socket.socket ( socket.AF_INET , socket.SOCK_STREAM )
                    s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
                    try:
                        if AWS:
                            s.connect ( ( NODE_IP[node_index], BASE_PORT+ node_index ) )
                        else:    
                            s.connect ( ( "127.0.0.1" , BASE_PORT+ node_index ) )
                        #s.connect ( ( "127.0.0.1" , str(BASE_PORT+ node_index) ) )
                    except Exception as e:
                        print("Retry connect to  node_id:", node_index, "with exception: ", e)
                        sleep(1)
                        connection_retries -= 1
                        s.close()
                    else:
                        connections [node_index] = s
                        print ( "Connected - Sending Hello to PORT" , BASE_PORT + node_index , " of Node" , node_index )
                        data_to_send= {
                                    'my_id':nid,
                                    'payload': "hello"
                                        }
                        data_to_send = json.dumps(data_to_send)
                        #send_data(connections[node_index], data_to_send)
                        send_data(s, data_to_send)

                        ack = s.recv(1024)
                        if ack:
                            print("ack received:", ack )
                        s.close()
                        break
            except Exception as e: print("Error while sending hello to node_id:", node_index, e)

def sendShareCommits2Peers(M, nid):



    global tx_count 
    global epoch 
    tx_count = tx_count + 1

    ctx = initSSLContext ( )



    share_gen_internal_time_start = time.process_time()

    if MALICIOUS:
        S, S_dash , rho_commits, rho_commit_strings, RHO, RHO_dash, dlog_commits, dlog_commit_strings  = rhoCommit(M, MALICIOUS)
    else:
        S, S_dash , rho_commits, rho_commit_strings, RHO, RHO_dash, dlog_commits, dlog_commit_strings  = rhoCommit(M)

    share_gen_internal_time_end = time.process_time()
    share_gen_time = (share_gen_internal_time_end - share_gen_internal_time_start ) * 1000

    print("share gen internal time:", share_gen_time)

    msg_handling_start = time.process_time()

    querykey = "ID"+str(nid)+"tx_count"+str(tx_count)+"epoch"+str(epoch) + str(time.strftime("%Y-%m-%d-%H-%M"))

    DPRINT (querykey)

    RHO_strings = []
    RHO_dash_strings = []
    for i in range(len(RHO)):
        RHO_strings.append(group.serialize(RHO[i]))
        RHO_dash_strings.append(group.serialize(RHO_dash[i]))



    #Save random shares generated by self 
    #generated_shares['S']                      = str(S)
    #generated_shares['S_dash']                 = str(S_dash)
    #generated_shares['PedersenCommits']        = str(rho_commits)
    generated_shares['PedersenCommitStrings']  = str(rho_commit_strings)
    generated_shares['RHOStrings']             = str(RHO_strings)
    generated_shares['RHOS']                   = RHO_strings
    generated_shares['RHODashStrings']         = str(RHO_dash_strings)
    #generated_shares['DlogCommits']           = str(dlog_commits)
    generated_shares['DlogCommitStrings']      = str(dlog_commit_strings)


    generated_shares['DlogCom']                 = dlog_commits
    generated_shares['RHO']                    = RHO
    generated_shares['RHODash']                = RHO_dash
    generated_shares['PederCom']               = rho_commits 


    ############# Broadcast using Tendermint #####################
    tobdx= {'my_id':nid, 'BroadcastCommit':str(rho_commit_strings), 'epoch': 0} 

    print("tobdx:", tobdx)
    test_json = json.dumps(tobdx)

    broadcast_begin = time.process_time()

    broadcast(tobdx, querykey)

    broadcast_end = time.process_time()

    broadcast_time = (broadcast_end - broadcast_begin) * 1000
    #print("broadcast_time:", broadcast_time)
    
    DPRINT("S",S)
    DPRINT(rho_commits)
    DPRINT(RHO)
    #either send to the stored PID or just send to the node list 
    #here sending to each stored node in the peer list 


    
    #DPRINT("N_M_map:", N_M_map)
    DPRINT("node_share_index:", node_share_index)
    DPRINT("node_share_index.keys():", node_share_index.keys())
    
    msg_handling_end = time.process_time()

    msg_handling_time = ( msg_handling_end - msg_handling_start) * 1000
    #print("msg handling time inside share/commit gen- inlcudes broadcast:", msg_handling_time)

    for pid in list(connections.keys()):

        time_per_node_msg_start = time.process_time()

        records[pid] = {}

        DPRINT("pid:", pid)
        DPRINT("node_share_index[pid]", node_share_index[str(pid)])

        shares               = []
        shares_dash          = []

        shares_strings       = []
        shares_dash_strings  = []

        for index in node_share_index[str(pid)]:
            shares.append(S[index])
            shares_dash.append(S_dash[index])

            shares_strings.append(group.serialize(S[index]))
            shares_dash_strings.append(group.serialize(S_dash[index]))

        #shares = S[node_share_index[str(pid)]]

        #data_to_send = {'my_id':id, 'rho_commits': str(rho_commits), 'share':shares }
        data_to_send = {'msg_type':"SHARES", 
                        'my_id':nid, 
                        #'rho_commits': str(rho_commits), 
                        #'share':str(shares), 
                        'share_strings':str(shares_strings), 
                        'share_dash_strings':str(shares_dash_strings), 
                        'key':querykey}
        #data_to_send = {'my_id':id, 'rho_commits': str(rho_commits), 'share':str(S[pid])}
        data_to_send = json.dumps(data_to_send)

        #Store what is being sent for later usage during complaints
        records[pid]['SENT_SHARES'] = data_to_send
        
        DPRINT (data_to_send)
        try:
            send_data(connections[pid], data_to_send)

        except Exception as e: print("Exception while sending shares:", e)

        time_per_node_msg_end = time.process_time()

        time_per_node_msg_handling = (time_per_node_msg_end - time_per_node_msg_start) * 1000 
        print("per_node_msg_handling and send time:", time_per_node_msg_handling)




def receive_shares():

    for pid in peers.keys():
        try:
            
            begin_receive_handling = time.process_time()

            share_commits_rcvd = recv_data(peers[pid])
            share_rcvd = json.loads(share_commits_rcvd)
            
            DPRINT ("\nReceived something:\n", share_rcvd)

            #my_rcvd_shares[pid]= ast.literal_eval(share_rcvd['share'])[0][0]
            #my_rcvd_shares[pid]= ast.literal_eval(share_rcvd['share'])

            DPRINT("My received shares", my_rcvd_shares)
            '''
            peer_share_commits[pid]= ast.literal_eval(share_rcvd['rho_commits'])
            '''
            
            #Store in strings from for complaint phase
            my_rcvd_shares_strings[pid] = share_rcvd['share_strings']
            my_rcvd_shares_dash_strings[pid]= share_rcvd['share_dash_strings']

            #Deserialize to obtain the values
            my_rcvd_shares[pid]= deserializeElements(share_rcvd['share_strings'])
            my_rcvd_shares_dash[pid]= deserializeElements(share_rcvd['share_dash_strings'])

            DPRINT ("My received shares", my_rcvd_shares)

            end_receive_handling = time.process_time()

            print("data receive and handling per node- time:", (end_receive_handling - begin_receive_handling)*1000)

            query_key = share_rcvd['key'] 
            #############Query from Tendermint############
            
            query_start = time.process_time()

            queried_result = query(query_key)

            query_end = time.process_time()
            print("tendermint query time:", (query_end - query_start)* 1000)

            DPRINT ("queried_result:", queried_result)
            
            commits = queried_result['BroadcastCommit']
            final_commits = deserializeElements(commits)

            DPRINT(final_commits)


            DPRINT("\nExtracted the share", my_rcvd_shares[pid])
            peer_share_commits[pid] = final_commits 
        except Exception as e: print(e)


def add_received_shares():
    return

def verify_received_shares(M, nid):
    #M = np.loadtxt("m3.txt", dtype=int)             #TODO: Change the filename to variable 
    #node_share_index = json.load(open("../../secretsharing/blackbox/tmp/node_share_index.txt"))
    M_row_index_for_pid = node_share_index[str(nid)]  
    M_my_rows = M[node_share_index[str(nid)]]

    DPRINT ("My M rows:", M_my_rows)
    

    for pid in peers.keys():
        peer_rho_commits =  peer_share_commits[pid]
        shares_rcvd      =  my_rcvd_shares[pid]
        shares_dash_rcvd =  my_rcvd_shares_dash[pid]

        if len(M_my_rows) != len(shares_rcvd):
            print("Eroor!: The number of nodes' rows in M and number of shares received are not same")

        '''
        com(s_i) = (C_i)**(m_{i,1}) * (C_i)**(m_{i,2}) ... * (C_i)**(m_{i,e})
        '''
        DPRINT("shares_rcvd", shares_rcvd)
        DPRINT("shares_dash_rcvd", shares_dash_rcvd)

        verified_shares_counter = 0

        #Check each received share
        for i in range(len(shares_rcvd)):
            DPRINT("M_my_rows[",i,"]:", M_my_rows[i])
            DPRINT("peer_rho_commits", peer_rho_commits)
            computed_share_commitment = (g ** shares_rcvd[i]) * ( h ** shares_dash_rcvd[i])

            #commitment_product = g_rand/g_rand #Initialize to unity element  
            #commitment_product = g_rand ** zero  #Initialize to unity element  
            commitment_product = unity #Initialize to unity element  
            if debug:
                DPRINT("Initial commitment product", commitment_product)
            
            for j in range(len(M_my_rows[i])) :
                if M_my_rows[i][j] == 1:
                    #b = group.init(ZR, int(M_my_rows[i][j]))
                    commitment_product = commitment_product * peer_rho_commits[j] 
            
            DPRINT("computed_share_commitment:", computed_share_commitment, "\ncommitment_product", commitment_product)
            if (computed_share_commitment == commitment_product):
                DPRINT("Share[",i,"] Verified")
                verified_shares_counter += 1
            else:
                DPRINT("Share[",i,"] Not Verified")

            
        if(verified_shares_counter == len(shares_rcvd)):
            DPRINT("Great, all shares verified for peer ID:",pid )
        else:
            print("Something looks fishy, raising a complaint against peer ID:", pid)
            nodes_verification_failed.append(pid)         
        
def broadcastDLogNIZK(nid):

    dlog_commit             = generated_shares['DlogCom'][0]
    pedersen_commit         = generated_shares['PederCom'][0]
    RHO_zero                = generated_shares['RHO'][0]
    RHO_dash_zero           = generated_shares['RHODash'][0]

    '''
    dlog_commits     = group.deserialize(dlog_commit)
    pedersen_commits = group.deserialize(pedersen_commit)
    RHO              = group.deserialize(RHO_strings)
    RHO_dash         = group.deserialie(RHO_dash_strings)
    '''


    dlog_commit_to_send = [group.serialize(dlog_commit)]

    #zkp_vec = nizkpok_vec(dlog_commits, pedersen_commits, RHO, RHO_dash)
    zkp_vec = nizkpok_vec([dlog_commit], [pedersen_commit], [RHO_zero], [RHO_dash_zero])

    tobdx   = {
            'msg_type'    : 'DLOGNIZK',
            'my_id'       : nid,
            'DLogStrings' : str(dlog_commit_to_send),
            'NIZK'        : str(zkp_vec)
            }

    global tx_count
    global epoch
    tx_count = tx_count + 1
    querykey = "NIZKID" + str(nid) + "tx_count" + str(tx_count) + "epoch" + str(epoch) + str(time.strftime("%Y-%m-%d-%H-%M"))
    
    #Tendermint broadcast 
    broadcast(tobdx, querykey)

    data_to_send = {
            'msg_type': 'DLogNizkKey',
            'my_id'   : nid,
            'key'     : querykey
            }
    data_to_send = json.dumps(data_to_send)

    #Individual key send 
    for pid in list(connections.keys()):
        DPRINT("In broadcastDLogNIZK-- pid", pid)
        try:
            send_data(connections[pid], data_to_send)
            DPRINT(data_to_send)
        except Exception as e: print("Error in sending DLogNizk Query Key to node-", pid, e)

def handleDlogNizk(nid):

    DPRINT("Handling DLog NIZK")

    for pid in peers.keys():
        try :
            broadcastedDlogNizk= recv_data(peers[pid])
        except:
            print("Exception: Have not received NIZK from node:", pid)
            continue

        else:
            broadcastedDlogNizk= json.loads(broadcastedDlogNizk)
            DPRINT("Inside else condition")
            DPRINT("Message type:", broadcastedDlogNizk['msg_type'])

            if (broadcastedDlogNizk['msg_type'] == "DLogNizkKey"):
                nizk_nid      = broadcastedDlogNizk['my_id']
                nizk_querykey = broadcastedDlogNizk['key'] 

                ###### query from Tendermint  
                nizks[pid] = query(nizk_querykey)

                verifyDlogNizk(nizks[pid], pid)
    return 

def verifyDlogNizk(nizks, pid):
    '''
    if (nizks['msg_type'] == "DLOGNIZK" ):
        print("The received message is dlognizk")
    '''
    DPRINT("nizks received:", nizks)
    #print("nizks received:", nizks)
    nizk_nid     = nizks['my_id']
    dlog_strings = nizks['DLogStrings']
    nizk_vec     = nizks['NIZK']

    #DPRINT("nizk_vec",nizk_vec,"type(nizk_vec):", type(nizk_vec), "nizk_vec[0]", nizk_vec[0])

    nizk_vec =         deserializeElements(nizk_vec)
    dlog_commits =     deserializeElements(dlog_strings)
    pedersen_commits = peer_share_commits[pid]

    peer_dlog_commits[pid] = dlog_commits[0] 

    DPRINT("Len of pedersen commits:", len(pedersen_commits))
    DPRINT("Len of dlog     commits:", len(dlog_commits))
    DPRINT("Len of nizk_vec:", len(nizk_vec))

    proofs = []
    for i in range(len(nizk_vec)//3):
        
        c = nizk_vec[3*i]
        u1 = nizk_vec[(3*i)+1]
        u2 = nizk_vec[(3*i)+2]
        DPRINT("\n\nsent proof:", [c, u1, u2])
        proofs.append([c,u1,u2]) #Putting them back as lists, not sure if it is needed

        V1_dash = (g ** u1) * (dlog_commits[i] ** c)
        dlog_commit_inv = dlog_commits[i] ** (-1)

        V2_dash = (h ** u2) * ((pedersen_commits[i] * dlog_commit_inv)**c)
        #V2_dash = (h ** u2) * ((pedersen_commits[i]/dlog_commits[i])**c)

        c_dash = group.hash((g,h,dlog_commits[i],pedersen_commits[i], V1_dash, V2_dash), ZR)

        DPRINT("\n\nc:",c)
        #DPRINT("c_dash:",c_dash, "dlog_commit:", dlog_commits[i], "pedersen_commit:", pedersen_commits[i], "V1_dash:", V1_dash, "V2_dash", V2_dash)

        #TODO: This is temporary fix, issue with group.hash function - correct later 
        c_str = str(c)
        c_str = c_str[:len(c_str)-30]
        c_dash_str = str(c_dash)
        c_dash_str = c_dash_str[:len(c_dash_str)-30]

        global DisqualifiedSet

        if group == group571:
            if c_str == c_dash_str:
                print("The NIZK proof is verified")
            else:
                DisqualifiedSet.append(pid)
        else:
            if (c == c_dash):
                DPRINT("The NIZK proof is verified")
                print("The NIZK proof is verified")
            else:
                DisqualifiedSet.append(pid)


'''
def dprf_mode(nid, DPRF_PORT):
    ctx = initSSLContext()
    s  = SSL.Connection(ctx,socket.socket(socket.AF_INET,socket.SOCK_STREAM))
    s.bind (( '',DPRF_PORT))
    s.listen (N_NODES + 1) #TODO: Make it just one 

    client_con , client_addr = s.accept ( )
    request = recv_data(client_con)    
    print ( "Received request from the client at " , str ( client_addr ) )
    
    request = json.loads(request)
    print(request)
    X = request['publicstring'] 
    keytype = request['keytype']

    #par_key will be a list 
    par_key = partial_eval(nid, X, keytype )
    serial_par_key = [group.serialize(key) for key in par_key]
    print("serial_par_key:", serial_par_key)
    
    data_to_send= {
            'my_id':nid,
            'partialEval': str(serial_par_key)
            }

    data_to_send = json.dumps(data_to_send)
    #data_to_send = "Server"+ str(nid) + "Says: hi"
    #oclient_con.sendall("Server Says:hi"+str(nid))
    send_data(client_con, data_to_send)

def computePubKey(nid):

    publicKey = group.random(G)
    publicKey = publicKey/publicKey # just make it unity 

    for pid in peers.keys():
        if pid not in DisqualifiedSet:
            publicKey = publicKey * peer_dlog_commits[pid]

    return publicKey 
'''


def node_thread(nid):
    #id = nid 
    DPRINT("Starting Node: ", nid)
    MY_PORT = BASE_PORT + nid
    DPRF_PORT = MY_PORT + 1000
    #start server part of node to receive Hello
    
    #nid = id 
    print("PHASE0: Attempting handshake with all the nodes")

    node_server_thread = threading.Thread(target = serverSock, args = (MY_IP, MY_PORT))
    #node_server_thread.daemon = False 
    node_server_thread.start()

    #sleep_time = (N_NODES - int(nid))
    #sleep(sleep_time)

    #start client part to send hello to all other peers 
    node_client_thread = threading.Thread(target = sendId2peers, args = (nid, ))
    #node_client_thread.daemon = False

    node_client_thread.start()

    node_server_thread.join()
    node_client_thread.join()
    
    DPRINT("PHASE0: Finished the first handshake with all the nodes")
    print("\nCommencing DKG...")



    if N_NODES < 4:
        M = np.loadtxt("../../secretsharing/blackbox/bbssutil/matrices/m3.txt", dtype=int)
    elif N_NODES < 10:
        M = np.loadtxt("../../secretsharing/blackbox/bbssutil/matrices/m9.txt", dtype=int)
    elif N_NODES < 28:
        M = np.loadtxt("../../secretsharing/blackbox/bbssutil/matrices/m27.txt", dtype=int)

    #Read M from file 
    #M = np.loadtxt("./temp/m27.txt", dtype=int)    #TODO: Change this to dynamic file path 
    #M = np.loadtxt("M.txt", dtype=int)


    M = np.array(M)

    sharing_start = time.process_time()


    t_start = time.time()

    DPRINT("\nPHASE1: Sending shares to nodes")
    share_send_thread = threading.Thread(target=sendShareCommits2Peers, args=(M,nid ))
    share_send_thread.daemon = False

    share_send_thread.start()
    share_send_thread.join()

    sharing_end = time.process_time()
    #Receive shares
    DPRINT("PHASE1: Receiving shares from nodes")

    receive_start = time.process_time()
    share_receive_thread= threading.Thread(target=receive_shares, args=( ))
    share_receive_thread.daemon = False

    share_receive_thread.start()

    #share_send_thread.join()
    share_receive_thread.join()
    receive_end = time.process_time()

    DPRINT("\nPHASE2: Verifying received commitments ")
    #Verify commitments 
    '''
    verify_start = time.process_time()

    share_verify_thread = threading.Thread(target=verify_received_shares, args=(M,nid ))
    share_verify_thread.daemon = False

    share_verify_thread.start()
    share_verify_thread.join()
    verify_end = time.process_time()

    print("\nPHASE2: Verified received commitments ")



    DPRINT("\nPHASE5: Broadcasting NIZKs")

    #Broadcast NIZK 
    gen_nizk_start = time.process_time()

    broadcastDlogNizk_thread = threading.Thread(target=broadcastDLogNIZK, args=(nid,))
    broadcastDlogNizk_thread.daemon = False

    broadcastDlogNizk_thread.start()
    broadcastDlogNizk_thread.join()

    gen_nizk_end = time.process_time()    

    #Handle nizk
    DPRINT("\nPHASE6: Verifying received NIZKs")
    verify_nizk_start = time.process_time()

    handleNizk_thread = threading.Thread(target=handleDlogNizk, args=(id,))
    handleNizk_thread.daemon = False

    handleNizk_thread.start()
    handleNizk_thread.join()
    
    verify_nizk_end = time.process_time()

    t_end = time.time()


    #Run DPRF   
    print("Running the DPRF MODE")
    dprf_thread = threading.Thread(target=dprf_mode, args=(id,DPRF_PORT ))
    dprf_thread.daemon = False
    dprf_thread.start()
    dprf_thread.join()
    print("Writing my share value to a file")

    if id != 0:
        my_secret_share = [0]*len(my_rcvd_shares[0])
    else:
        my_secret_share = [0]*len(my_rcvd_shares[1])   #Assuming atleast one other node exists 


    for key in my_rcvd_shares.keys():
        if key not in DisqualifiedSet:
           my_secret_share = list(map(add, my_secret_share, my_rcvd_shares[key])) 
           my_secret_share_dash = list(map(add, my_secret_share, my_rcvd_shares_dash[key])) 

    #print("my_secret_share", my_secret_share)
    my_share_strings = [str(group.serialize(share)) for share in my_secret_share] 
    my_share_dash_strings = [str(group.serialize(share)) for share in my_secret_share] 
    
    #Write secret share to a file 
    share_filename = "./tmp/node" + str(nid) + "share.txt"
    json.dump(str(my_share_strings), open(share_filename,'w'))
    share_dash_filename = "./tmp/node" + str(nid) + "share_dash.txt"
    json.dump(str(my_share_dash_strings), open(share_dash_filename,'w'))

    sharing_time          = (sharing_end          - sharing_start)          * 1000
    receive_time          = (receive_end          - receive_start)          * 1000
    verify_commit_time    = (verify_end           - verify_start)           * 1000
    #complaint_time        = (complaint_end        - complaint_start)        * 1000
    #complaint_handle_time = (handle_complaint_end - handle_complaint_start) * 1000
    #reply_handle_time     = (handle_reply_end     - handle_reply_start)     * 1000
    gen_nizk_time         = (gen_nizk_end         - gen_nizk_start)         * 1000
    verify_nizk_time      = (verify_nizk_end      - verify_nizk_start)      * 1000

    print("\n")
    print( "sharing_time:",          sharing_time)
    print( "receive_time:",          receive_time)
    print( "verify_commit_time:",    verify_commit_time)
    #print( "complaint_time:",        complaint_time)
    #print( "complaint_handle_time:", complaint_handle_time)
    #print( "reply_handle_time:",     reply_handle_time)
    print( "gen_nizk_time:",         gen_nizk_time)
    print( "verify_nizk_time:",      verify_nizk_time)
    print("\n")

    #timing_output = [sharing_time, receive_time, verify_commit_time, complaint_time, complaint_handle_time, reply_handle_time, gen_nizk_time, verify_nizk_time]
    timing_output = [sharing_time, receive_time, verify_commit_time, gen_nizk_time, verify_nizk_time]

    if group == group160:
        bits = 160
    if group == group192:
        bits = 192
    elif group == group256:
        bits = 256
    elif group == group283:
        bits = 283
    elif group == group571:
        bits = 571

    if MALICIOUS:
        timingfilename = "./tmp/bbss_dkgtiming_malicious_"+str(bits)+"bit_n_"+str(N_NODES)+".csv"
    else:
        timingfilename = "./tmp/bbss_non_mal_dkgtiming"+str(bits)+"_n_"+str(N_NODES)+".csv"
        totaltimingfilename = "./tmp/bbss_non_mal_dkgtiming_total_"+str(bits)+"_n_"+str(N_NODES)+".csv"

    total_clock_time = t_end - t_start 

    total_times = [sum(timing_output), total_clock_time]
    print("total_time:", total_times)
    #out = open(timingfilename, 'a')
    #for column in timing_output:
    #    out.write('%d;' % column)
    #    out.write('\n')
    #out.close()

    with open(timingfilename, "a") as f:
        writer = csv.writer(f)
        writer.writerow(timing_output)

    with open(totaltimingfilename, "a") as tf:
        writer = csv.writer(tf)
        writer.writerow(total_times)


    DPRINT("PHASEX: Finished the DKG process")
    '''
    

if __name__ == "__main__" :

    description = """ 
    This program provides a single node running the DKG instance 
    """

    parser = argparse.ArgumentParser(description=description)
    parser.add_argument(
        "-i", "--id", default=0, type=int, help="node id "
    )   

    parser.add_argument(
        "-n", "--nodes", default=4, type=int, help="number of nodes in DKG"
    )   


    parser.add_argument(
        "-m", "--malicious", default=0, type=int, help="is the node malicious"
    )   

    args = parser.parse_args()


    global N_NODES
    global complaint_count 
    N_NODES = args.nodes
    complaint_count = {k: 0  for k in range(N_NODES)}

    MALICIOUS = args.malicious

    if MALICIOUS:
        print("\nI am a MALICIOUS node\n\n")


    node_thread(int(args.id))
    #node_thread( int(argv[1]))

    sys.exit(0)
    os.system("exit 0")
    




